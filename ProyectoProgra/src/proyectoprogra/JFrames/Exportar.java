/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectoprogra.JFrames;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import proyectoprogra.Cliente;
import proyectoprogra.Globales;
import proyectoprogra.Equipo;
import proyectoprogra.Factura;
import static proyectoprogra.Globales.Facturas;
import proyectoprogra.Menu;

/**
 *
 * @author josea
 */
public class Exportar extends javax.swing.JFrame {

    /**
     * Creates new form Exportar
     */
    public Exportar() {
        initComponents();
        setTitle("Exportar");
        setLocationRelativeTo(null);
        setResizable(false);
        calcularFechaActual();
    }
    
    public void calcularFechaActual() { // esto sirve para obtener el dia
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        txtFecha.setText(dateFormat.format(date));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        btnExportar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Fecha");

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnSalir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExportar)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnExportar))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        //EXPORTANDO EQUIPOS
        try {
            int contador = 0;
            double monto = 0;
            String fechaParametro = txtFecha.getText().replaceAll("/", "-");
            Date date = new Date();
            DateFormat dateFormat = new SimpleDateFormat("(dd-MM-yyyy HH.mm.ss)");
            String fecha = dateFormat.format(date);
            String nombreArchivo = "";

            // EXPORTANDO FACTURAS QUE ES LO MISMO QUE EL INGRESOS TOTALES
            nombreArchivo = "exportarFacturas " + fechaParametro + " " + fecha + ".csw";
            escribirArchivo(nombreArchivo, new Factura().getTitulos());
            for (int i = 0; i < Globales.Facturas.size(); i++) {
                if (Globales.Facturas.get(i).getFecha().equalsIgnoreCase(txtFecha.getText())) {
                    escribirArchivo(nombreArchivo, Globales.Facturas.get(i).getValores());
                    contador++;
                    if (Globales.Facturas.get(i).isEstado() == true) {
                        monto += Globales.Facturas.get(i).getMontoAPagar();
                    }                   
                }
            }
            escribirArchivo(nombreArchivo, "Ingresos del dia ( " + txtFecha.getText() + " ): " + monto);
            JOptionPane.showMessageDialog(null, "Archivo: " + nombreArchivo + " cantidad de registros: " + contador);

            // EXPORTANDO CLIENTES 
            nombreArchivo = "exportarClientes " + fechaParametro + " " + fecha + ".csw";
            enviarSocket("Exportar Clientes: " + fechaParametro);
            escribirArchivo(nombreArchivo, new Cliente().getTitulos());
            enviarSocket(new Cliente().getTitulos());
            contador = 0;
            for (int i = 0; i < Globales.Clientes.size(); i++) {
                if (Globales.Clientes.get(i).getFechaCreacion().equalsIgnoreCase(txtFecha.getText())) {
                    escribirArchivo(nombreArchivo, Globales.Clientes.get(i).getValores());
                    enviarSocket(Globales.Clientes.get(i).getValores());
                    contador++;
                }
            }
            escribirArchivo(nombreArchivo, "TOTAL DE CLIENTES: " + contador);
            enviarSocket("TOTAL DE CLIENTES: " + contador);
            escribirArchivo(nombreArchivo, "Ingresos del dia ( " + txtFecha.getText() + " ): " + monto);
            enviarSocket("Ingresos del dia ( " + txtFecha.getText() + " ): " + monto);
            enviarSocket(" ");
            
            JOptionPane.showMessageDialog(null, "Archivo: " + nombreArchivo + " cantidad de registros: " + contador);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        

    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.setVisible(false);
        new Menu().setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed
    
    public static void escribirArchivo(String nombreArchivo, String texto) {
        try (FileWriter fichero = new FileWriter(nombreArchivo, true)) {
            PrintWriter pw = new PrintWriter(fichero);
            pw.println(texto);
            pw.close();
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

//        try {
//            DataOutputStream archivo = new DataOutputStream(new FileOutputStream(nombreArchivo, true));
//            archivo.writeUTF(texto + "\n");
//            archivo.close();
//        } catch (Exception e) {
//            System.out.println(e.getMessage());
//        }
    }
    
    private static void enviarSocket(String texto) {
        final String HOST = "127.0.0.1";
        final int PUERTO = 5000;
        DataInputStream in;
        DataOutputStream out;
        
        try {
            Socket sc = new Socket(HOST, PUERTO);
            in = new DataInputStream(sc.getInputStream());
            out = new DataOutputStream(sc.getOutputStream());
            
            out.writeUTF(texto);
            String mensaje = in.readUTF();
            System.out.println("Servidor: " + mensaje);
            sc.close();
            
        } catch (Exception e) {
            System.out.println("Servidor " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Exportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Exportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Exportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Exportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Exportar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtFecha;
    // End of variables declaration//GEN-END:variables
}
